// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: proto/greeter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "greeter";

export interface GreeterRequest {
  name: string;
  lang: string;
}

export interface GreeterReply {
  message: string;
}

function createBaseGreeterRequest(): GreeterRequest {
  return { name: "", lang: "" };
}

export const GreeterRequest: MessageFns<GreeterRequest> = {
  encode(message: GreeterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.lang !== "") {
      writer.uint32(18).string(message.lang);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GreeterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGreeterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lang = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GreeterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      lang: isSet(object.lang) ? globalThis.String(object.lang) : "",
    };
  },

  toJSON(message: GreeterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.lang !== "") {
      obj.lang = message.lang;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GreeterRequest>, I>>(base?: I): GreeterRequest {
    return GreeterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GreeterRequest>, I>>(object: I): GreeterRequest {
    const message = createBaseGreeterRequest();
    message.name = object.name ?? "";
    message.lang = object.lang ?? "";
    return message;
  },
};

function createBaseGreeterReply(): GreeterReply {
  return { message: "" };
}

export const GreeterReply: MessageFns<GreeterReply> = {
  encode(message: GreeterReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GreeterReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGreeterReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GreeterReply {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: GreeterReply): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GreeterReply>, I>>(base?: I): GreeterReply {
    return GreeterReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GreeterReply>, I>>(object: I): GreeterReply {
    const message = createBaseGreeterReply();
    message.message = object.message ?? "";
    return message;
  },
};

export type GreeterService = typeof GreeterService;
export const GreeterService = {
  greet: {
    path: "/greeter.Greeter/Greet",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GreeterRequest): Buffer => Buffer.from(GreeterRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GreeterRequest => GreeterRequest.decode(value),
    responseSerialize: (value: GreeterReply): Buffer => Buffer.from(GreeterReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): GreeterReply => GreeterReply.decode(value),
  },
} as const;

export interface GreeterServer extends UntypedServiceImplementation {
  greet: handleUnaryCall<GreeterRequest, GreeterReply>;
}

export interface GreeterClient extends Client {
  greet(
    request: GreeterRequest,
    callback: (error: ServiceError | null, response: GreeterReply) => void,
  ): ClientUnaryCall;
  greet(
    request: GreeterRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GreeterReply) => void,
  ): ClientUnaryCall;
  greet(
    request: GreeterRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GreeterReply) => void,
  ): ClientUnaryCall;
}

export const GreeterClient = makeGenericClientConstructor(GreeterService, "greeter.Greeter") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GreeterClient;
  service: typeof GreeterService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
